// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getBookmark = `-- name: GetBookmark :one
SELECT
  b.url AS url,
  b.created_at AS bookmark_created_at,
  t.name AS tag_name,
  c.comment AS comment,
  c.updated_at AS comment_updated_at
FROM
  bookmarks AS b
  LEFT JOIN bookmark_has_tags AS bht ON b.id = bht.bookmark_id
  LEFT JOIN tags AS t ON bht.bookmark_id = t.id
  LEFT JOIN bookmark_has_comments AS bhc ON b.id = bhc.bookmark_id
  LEFT JOIN comments AS c ON bhc.bookmark_id = c.id
WHERE
  bookmarks.id = $1
`

type GetBookmarkRow struct {
	Url               string
	BookmarkCreatedAt time.Time
	TagName           sql.NullString
	Comment           sql.NullString
	CommentUpdatedAt  sql.NullTime
}

func (q *Queries) GetBookmark(ctx context.Context, id uuid.UUID) (GetBookmarkRow, error) {
	row := q.db.QueryRowContext(ctx, getBookmark, id)
	var i GetBookmarkRow
	err := row.Scan(
		&i.Url,
		&i.BookmarkCreatedAt,
		&i.TagName,
		&i.Comment,
		&i.CommentUpdatedAt,
	)
	return i, err
}

const listBookmarks = `-- name: ListBookmarks :many
SELECT
  b.url AS url,
  b.created_at AS bookmark_created_at,
  t.name AS tag_name,
  c.comment AS comment,
  c.updated_at AS comment_updated_at
FROM
  bookmarks AS b
  LEFT JOIN bookmark_has_tags AS bht ON b.id = bht.bookmark_id
  LEFT JOIN tags AS t ON bht.bookmark_id = t.id
  LEFT JOIN bookmark_has_comments AS bhc ON b.id = bhc.bookmark_id
  LEFT JOIN comments AS c ON bhc.bookmark_id = c.id
`

type ListBookmarksRow struct {
	Url               string
	BookmarkCreatedAt time.Time
	TagName           sql.NullString
	Comment           sql.NullString
	CommentUpdatedAt  sql.NullTime
}

func (q *Queries) ListBookmarks(ctx context.Context) ([]ListBookmarksRow, error) {
	rows, err := q.db.QueryContext(ctx, listBookmarks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookmarksRow
	for rows.Next() {
		var i ListBookmarksRow
		if err := rows.Scan(
			&i.Url,
			&i.BookmarkCreatedAt,
			&i.TagName,
			&i.Comment,
			&i.CommentUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
